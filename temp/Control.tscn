[gd_scene load_steps=16 format=2]

[ext_resource path="res://lavaShader.gdshader" type="Shader" id=1]

[sub_resource type="VisualShaderNodeScalarOp" id=1]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeTextureUniform" id=2]
output_port_for_preview = 0
uniform_name = "TextureUniform"

[sub_resource type="VisualShaderNodeInput" id=3]
output_port_for_preview = 0
input_name = "time"

[sub_resource type="VisualShaderNodeVectorCompose" id=4]
default_input_values = [ 0, 0.0, 1, 1.0, 2, 1.0 ]

[sub_resource type="VisualShaderNodeVectorFunc" id=5]
output_port_for_preview = 0
function = 5

[sub_resource type="VisualShaderNodeVectorDecompose" id=6]

[sub_resource type="VisualShaderNodeScalarOp" id=7]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=8]

[sub_resource type="VisualShaderNodeScalarOp" id=9]
default_input_values = [ 0, 0.0, 1, 0.25 ]
operator = 2

[sub_resource type="VisualShader" id=10]
code = "shader_type canvas_item;
uniform sampler2D TextureUniform;



void vertex() {
// Output:0

}

void fragment() {
// Input:3
	float n_out3p0 = TIME;

// ScalarOp:9
	float n_in9p1 = 0.25000;
	float n_out9p0 = n_out3p0 * n_in9p1;

// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(TextureUniform, UV.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// VectorDecompose:6
	float n_out6p0 = n_out2p0.x;
	float n_out6p1 = n_out2p0.y;
	float n_out6p2 = n_out2p0.z;

// ScalarOp:7
	float n_in7p1 = 0.50000;
	float n_out7p0 = n_out6p0 - n_in7p1;

// ScalarOp:10
	float n_in10p1 = 2.00000;
	float n_out10p0 = n_out7p0 * n_in10p1;

// ScalarOp:8
	float n_out8p0 = n_out9p0 + n_out10p0;

// VectorCompose:4
	float n_in4p1 = 1.00000;
	float n_in4p2 = 1.00000;
	vec3 n_out4p0 = vec3(n_out8p0, n_in4p1, n_in4p2);

// VectorFunc:5
	vec3 n_out5p0;
	{
		vec3 c = n_out4p0;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		n_out5p0 = c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}

// Output:0
	COLOR.rgb = n_out5p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -509.004, -70.1434 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 800, -80 )
nodes/fragment/2/node = SubResource( 2 )
nodes/fragment/2/position = Vector2( -960, 240 )
nodes/fragment/3/node = SubResource( 3 )
nodes/fragment/3/position = Vector2( -640, -60 )
nodes/fragment/4/node = SubResource( 4 )
nodes/fragment/4/position = Vector2( 260, -60 )
nodes/fragment/5/node = SubResource( 5 )
nodes/fragment/5/position = Vector2( 520, -80 )
nodes/fragment/6/node = SubResource( 6 )
nodes/fragment/6/position = Vector2( -600, 280 )
nodes/fragment/7/node = SubResource( 7 )
nodes/fragment/7/position = Vector2( -340, 260 )
nodes/fragment/8/node = SubResource( 8 )
nodes/fragment/8/position = Vector2( -40, 20 )
nodes/fragment/9/node = SubResource( 9 )
nodes/fragment/9/position = Vector2( -340, -40 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -40, 260 )
nodes/fragment/connections = PoolIntArray( 4, 0, 5, 0, 2, 0, 6, 0, 6, 0, 7, 0, 8, 0, 4, 0, 3, 0, 9, 0, 7, 0, 10, 0, 9, 0, 8, 0, 10, 0, 8, 1, 5, 0, 0, 0 )

[sub_resource type="OpenSimplexNoise" id=11]

[sub_resource type="NoiseTexture" id=12]
noise = SubResource( 11 )

[sub_resource type="ShaderMaterial" id=13]
shader = SubResource( 10 )
shader_param/TextureUniform = SubResource( 12 )

[sub_resource type="ShaderMaterial" id=15]
shader = ExtResource( 1 )

[node name="Control" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="ColorRect" type="ColorRect" parent="."]
material = SubResource( 13 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 113.0
margin_top = 65.0
margin_right = -796.0
margin_bottom = -335.0

[node name="ColorRect2" type="ColorRect" parent="."]
material = SubResource( 15 )
margin_left = 705.0
margin_top = 171.0
margin_right = 1000.0
margin_bottom = 351.0
